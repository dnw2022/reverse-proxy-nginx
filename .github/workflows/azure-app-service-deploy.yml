# This deployment files assumes a Service Principal (SP) with the name mentioned in the env section below has already been created
#
# To create a SP:
#
# az ad sp create-for-rbac \
#   --name $SERVICE_PRINCIPAL_NAME \
#   --role $CONTRIBUTOR_ROLE_NAME \
#   --scopes /subscriptions/$SUBSCRIPTION_ID \
#   --sdk-auth
#
# Note that the scope is for the whole subscription and not just a resource group.
# Limiting the scope to a specific Resource Group does not allow for checking if the Resource Group exists
# and for creating it if it does not.
#
# More details: https://github.com/Azure/login#configure-deployment-credentials
name: Deploy to Azure App Service (AAS)

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  SUBSCRIPTION_ID: "f2485aef-25f1-418d-bb35-92098bbf3b08"
  SERVICE_PRINCIPAL_NAME: "sp-dnw"
  RESOURCE_GROUP: "rg-dnw"
  LOCATION: "westeurope"
  ACR_NAME: "acrdnw2"
  PLAN: "plan-dnw"
  PROXY_APP_NAME: "reverse-proxy-nginx-dnw"
  CONTAINER_APP_ENV: "Prod"
  CONTAINER_APP_NAME: "my-container-app"
  CONTAINER_APP_IMAGE: "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
  WILDCARD_DOMAIN: "*.dotnet-works.com"
  WILDCARD_PFX_BASE64: ${{ secrets.WILDCARD_PFX_BASE64 }}
  WILDCARD_PFX_THUMBPRINT: "85C4E5002755A36942CC34286180EC29AC66D595"
  WILDCARD_PFX_PWD: ${{ secrets.WILDCARD_PFX_PWD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # https://github.com/Azure/login
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Resources if they don't exist
        run: |-
          if [ $(az group exists --name $RESOURCE_GROUP) = false ]; then
            echo "Resource Group $RESOURCE_GROUP does not exist. Creating it.."
            az group create --name $RESOURCE_GROUP --location $LOCATION
          fi

          if [[ $(az acr list --query "[?name=='$ACR_NAME'] | length(@)") < 1 ]]
          then
            echo "Azure Container Registry $ACR_NAME does not exist. Creating it.."
            az acr create \
              --resource-group $RESOURCE_GROUP \
              --name $ACR_NAME \
              --sku Basic

            # It would make sense to assume that the SP that creates an acr has full rights on that acr?
            # sudo apt install -y jq
            # ACR_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.ContainerRegistry/registries/$ACR_NAME"
            # SERVICE_PRINCIPAL_OBJECT_ID=$(az ad sp list --filter "displayname eq '$SERVICE_PRINCIPAL_NAME'" --query "[].{displayName:displayName, objectId:objectId}" | jq -r '.[0].objectId')
            # echo "Assigning role"
            # echo "SERVICE_PRINCIPAL_OBJECT_ID=$SERVICE_PRINCIPAL_OBJECT_ID"
            # echo "ACR_ID=$ACR_ID"
            # az role assignment create --assignee $SERVICE_PRINCIPAL_OBJECT_ID --scope $ACR_ID --role acrpush
          fi

          if [[ $(az appservice plan list --query "[?name=='$PLAN'] | length(@)") < 1 ]] 
          then
            echo "App Service Plan $PLAN does not exist. Creating it.."
            az appservice plan create \
              -g $RESOURCE_GROUP \
              -n $PLAN \
              --is-linux \
              --number-of-workers 1 \
              --sku B1
          fi

      - name: Create Azure Container App if it does not exist
        run: |-
          az config set extension.use_dynamic_install=yes_without_prompt

          if [[ $(az containerapp env list -g $RESOURCE_GROUP --query "[?name=='$CONTAINER_APP_ENV'] | length(@)") < 1 ]] 
          then
            echo "Containerapp Environment $CONTAINER_APP_ENV does not exist. Creating it.."
            az containerapp env create \
              --name $CONTAINER_APP_ENV \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --internal-only false
          fi

          if [[ $(az containerapp list --query "[?name=='$CONTAINER_APP_NAME'] | length(@)") < 1 ]] 
          then
            echo "Containerapp $CONTAINER_APP_NAME does not exist. Creating it.."
            az containerapp create \
              --name $CONTAINER_APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $CONTAINER_APP_IMAGE \
              --target-port 80 \
              --ingress "external" \
              --query properties.configuration.ingress.fqdn
          fi

      # https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-azure-cli
      - name: Build Webapp image and push it to Azure Container Service (ACR)
        run: |-
          ENV_IP=$(az containerapp env show --name $CONTAINER_APP_ENV --resource-group $RESOURCE_GROUP --query "properties.staticIp" | tr -d '"')
          ENV_DEFAULT_DOMAIN=$(az containerapp env show --name $CONTAINER_APP_ENV --resource-group $RESOURCE_GROUP --query "properties.defaultDomain" | tr -d '"')
          sed -r "s/__ENV_IP__/$ENV_IP/g; s/__ENV_DEFAULT_DOMAIN__/$ENV_DEFAULT_DOMAIN/g" default.conf.tpl > default.conf

          cat default.conf

          az acr login --name $ACR_NAME
          ACR_TAG="$ACR_NAME.azurecr.io/$PROXY_APP_NAME:latest"
          docker build -t $ACR_TAG .
          docker push $ACR_TAG
          az acr repository list --name $ACR_NAME --output table

          rm default.conf

      - name: Create Azure Web App if it does not exist.
        run: |-
          if [[ $(az webapp list --query "[?name=='$PROXY_APP_NAME'] | length(@)") < 1 ]] 
          then
            echo "Webapp $PROXY_APP_NAME does not exist. Creating it.."

            az acr update -n $ACR_NAME --admin-enabled true

            ACR_TAG="$ACR_NAME.azurecr.io/$PROXY_APP_NAME:latest"
            az webapp create \
              --resource-group $RESOURCE_GROUP \
              --plan $PLAN \
              --name $PROXY_APP_NAME \
              --deployment-container-image-name $ACR_TAG

            az webapp deployment container config \
              --name $PROXY_APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --enable-cd true
          fi

      - name: Create Azure Web App if it does not exist.
        run: |-
          echo "az webapp config hostname add --hostname $WILDCARD_DOMAIN --resource-group $RESOURCE_GROUP --webapp-name $PROXY_APP_NAME"
          az webapp config hostname add \
            --hostname $WILDCARD_DOMAIN \
            --resource-group $RESOURCE_GROUP \
            --webapp-name $PROXY_APP_NAME

          echo $WILDCARD_PFX_BASE64 | base64 --decode > cert.pfx
          az webapp config ssl upload \
            --certificate-file cert.pfx \
            --certificate-password $WILDCARD_PFX_PWD \
            --name $PROXY_APP_NAME \
            --resource-group $RESOURCE_GROUP

          # az webapp config ssl bind \
          #   --certificate-thumbprint $WILDCARD_PFX_THUMBPRINT \
          #   --name $PROXY_APP_NAME
          #   --resource-group $RESOURCE_GROUP
          #   --ssl-type SNI
